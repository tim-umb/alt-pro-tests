/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { IconButton, SvgIcon } from '@mui/material';
import StarIcon from '@mui/icons-material/Star';
import { ReactComponent as StarFilled } from 'src/assets/images/_StarFilled.svg';
import { styled } from '@mui/material/styles';
import { MenuItemProps } from 'src/types';
import useMenuItem from 'src/components/MenuItem/useMenuItem';

const StatePrimary: any = styled('div', {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  width: '100%',
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  height: 'auto',
  backgroundColor: data.onHover ? theme.palette['action']['hover'] : 'unset',
  borderRadius: data.onHover ? `4px` : 'unset',
}));

const Container: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `8px 16px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
  overflow: `hidden`,
});

const LeftContent: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const Icon1: any = styled(SvgIcon)(({ theme }: any) => ({
  color: theme.palette['action']['active'],
  margin: `0px`,
}));

const MinWidth: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  height: `0px`,
  width: `56px`,
  margin: `0px`,
});

const ListItemText: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `4px 0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const ListItem: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
  alignSelf: `stretch`,
  margin: `0px`,
}));

const Secondary: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['text']['secondary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
  alignSelf: `stretch`,
  margin: `0px`,
}));

const IconButton1: any = styled(IconButton)(({ theme }: any) => ({
  margin: `0px`,
}));

function MenuItem(props: MenuItemProps): JSX.Element {
  const { data } = useMenuItem();

  return (
    <StatePrimary className={props.className} data={data}>
      <Container>
        <LeftContent>
          <Icon1 fontSize={'medium'} component={StarFilled} />
          <MinWidth></MinWidth>
        </LeftContent>
        <ListItemText>
          <ListItem>{`List item`}</ListItem>
          {false && <Secondary>{`Secondary`}</Secondary>}
        </ListItemText>
        {false && (
          <IconButton1 size={'medium'} color={'default'} disabled={false}>
            <SvgIcon
              component={StarIcon}
              htmlColor={`rgba(0, 0, 0, 0.56)`}
            ></SvgIcon>
          </IconButton1>
        )}
      </Container>
    </StatePrimary>
  );
}

export default MenuItem;
