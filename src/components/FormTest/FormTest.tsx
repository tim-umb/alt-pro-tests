/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { TextField } from '@mui/material';
import { styled } from '@mui/material/styles';
import { FormTestProps } from 'src/types';

const FormTest1: any = styled('div')(({ theme }: any) => ({
  backgroundColor: theme.palette['background']['paper-elevation-4'],
  boxShadow: theme.customShadows['elevation']['4'].boxShadow,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  width: `500px`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `16px`,
  boxSizing: `border-box`,
  height: 'auto',
}));

const TextField1: any = styled(TextField)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `0px`,
  color: theme.palette['text']['secondary'],
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `400`,
  fontSize: `12px`,
  letterSpacing: `0.15000000596046448px`,
  textDecoration: `none`,
  lineHeight: `12px`,
  textTransform: `none`,
}));

const TextField2: any = styled(TextField)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `16px 0px 0px 0px`,
  color: theme.palette['text']['secondary'],
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `400`,
  fontSize: `12px`,
  letterSpacing: `0.15000000596046448px`,
  textDecoration: `none`,
  lineHeight: `12px`,
  textTransform: `none`,
}));

const Frame5: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `16px 0px 0px 0px`,
});

const TextField3: any = styled(TextField)(({ theme }: any) => ({
  flex: `1`,
  margin: `0px`,
  color: theme.palette['text']['secondary'],
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `400`,
  fontSize: `12px`,
  letterSpacing: `0.15000000596046448px`,
  textDecoration: `none`,
  lineHeight: `12px`,
  textTransform: `none`,
}));

const TextField4: any = styled(TextField)(({ theme }: any) => ({
  flex: `1`,
  margin: `0px 0px 0px 10px`,
  color: theme.palette['text']['secondary'],
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `400`,
  fontSize: `12px`,
  letterSpacing: `0.15000000596046448px`,
  textDecoration: `none`,
  lineHeight: `12px`,
  textTransform: `none`,
}));

const Frame6: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `16px 0px 0px 0px`,
});

const TextField5: any = styled(TextField)(({ theme }: any) => ({
  flex: `1`,
  margin: `0px`,
  color: theme.palette['text']['secondary'],
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `400`,
  fontSize: `12px`,
  letterSpacing: `0.15000000596046448px`,
  textDecoration: `none`,
  lineHeight: `12px`,
  textTransform: `none`,
}));

const TextField6: any = styled(TextField)(({ theme }: any) => ({
  flex: `1`,
  margin: `0px 0px 0px 10px`,
  color: theme.palette['text']['secondary'],
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `400`,
  fontSize: `12px`,
  letterSpacing: `0.15000000596046448px`,
  textDecoration: `none`,
  lineHeight: `12px`,
  textTransform: `none`,
}));

function FormTest(props: FormTestProps): JSX.Element {
  return (
    <FormTest1 className={props.className}>
      <TextField1
        variant={'outlined'}
        disabled={false}
        size={'small'}
        label={'Label'}
      />
      <TextField2
        variant={'outlined'}
        disabled={false}
        size={'small'}
        label={'Label'}
      />
      <Frame5>
        <TextField3
          variant={'outlined'}
          disabled={false}
          size={'small'}
          label={'Label'}
        />
        <TextField4
          variant={'outlined'}
          disabled={false}
          size={'small'}
          label={'Label'}
        />
      </Frame5>
      <Frame6>
        <TextField5
          variant={'outlined'}
          disabled={false}
          size={'small'}
          label={'Label'}
        />
        <TextField6
          variant={'outlined'}
          disabled={false}
          size={'small'}
          label={'Label'}
        />
      </Frame6>
    </FormTest1>
  );
}

export default FormTest;
