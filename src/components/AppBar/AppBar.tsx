/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import ViewHeadlineIcon from '@mui/icons-material/ViewHeadline';
import { SvgIcon } from '@mui/material';
import { styled } from '@mui/material/styles';
import HistoryOutlined from 'src/components/HistoryOutlined/HistoryOutlined';
import NotificationsOutlined from 'src/components/NotificationsOutlined/NotificationsOutlined';
import LogoutOutlined from 'src/components/LogoutOutlined/LogoutOutlined';
import { AppBarProps } from 'src/types';
import useAppBar from 'src/components/AppBar/useAppBar';

const AppBar1: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  width: '100vw',
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  height: `48px`,
});

const Paper: any = styled('div')(({ theme }: any) => ({
  backgroundColor: theme.palette['primary']['main'],
  boxShadow: theme.customShadows['elevation']['4'].boxShadow,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
  overflow: `hidden`,
}));

const CustomToolbar: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px 12px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
  overflow: `hidden`,
});

const LeftSide: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const IconButton: any = styled('div')({
  borderRadius: `100px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `center`,
  alignItems: `center`,
  padding: `12px`,
  boxSizing: `border-box`,
  margin: `0px`,
  overflow: `hidden`,
  cursor: `pointer`,
});

const Title: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['primary']['contrast'],
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `600`,
  fontSize: `18.700000762939453px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  lineHeight: `116.70000553131104%`,
  textTransform: `none`,
  margin: `0px 0px 0px 16px`,
}));

const Stack: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const Icon1: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const HistoryOutlined1: any = styled(HistoryOutlined)(({ theme }: any) => ({
  width: `20px`,
  height: `20px`,
  margin: `0px`,
}));

const Icon2: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px 0px 0px 16px`,
});

const NotificationsOutline: any = styled(NotificationsOutlined)(
  ({ theme }: any) => ({
    width: `20px`,
    height: `20px`,
    margin: `0px`,
  })
);

const Icon3: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px 0px 0px 16px`,
});

const LogoutOutlined1: any = styled(LogoutOutlined)(({ theme }: any) => ({
  width: `20px`,
  height: `20px`,
  margin: `0px`,
}));

const MinHeight: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  width: `0px`,
  height: `48px`,
  margin: `0px`,
});

function AppBar(props: AppBarProps): JSX.Element {
  const { fns } = useAppBar();

  return (
    <AppBar1 className={props.className}>
      <Paper>
        <CustomToolbar>
          <LeftSide>
            <IconButton onClick={fns.handleViewHeadlineClick}>
              <SvgIcon
                component={ViewHeadlineIcon}
                htmlColor={`rgba(255, 255, 255, 1)`}
              ></SvgIcon>
            </IconButton>
            <Title>{`Title`}</Title>
          </LeftSide>
          <Stack>
            <Icon1>
              <HistoryOutlined1 />
            </Icon1>
            <Icon2>
              <NotificationsOutline />
            </Icon2>
            <Icon3>
              <LogoutOutlined1 />
            </Icon3>
          </Stack>
          <MinHeight></MinHeight>
        </CustomToolbar>
      </Paper>
    </AppBar1>
  );
}

export default AppBar;
