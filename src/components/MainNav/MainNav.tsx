/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { styled } from '@mui/material/styles';
import MenuItem from 'src/components/MenuItem/MenuItem';
import { MainNavProps } from 'src/types';
import useMainNav from 'src/components/MainNav/useMainNav';

const StateOpened: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  height: '100vh',
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  width: 'fit-content',
});

const Drawer: any = styled('div', {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ data }: any) => ({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  width: data.isClosed ? 'unset' : `256px`,
  margin: `0px`,
  alignSelf: data.isClosed ? `stretch` : 'unset',
}));

const Paper: any = styled('div', {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  backgroundColor: theme.palette['background']['paper-elevation-1'],
  boxShadow: theme.customShadows['elevation']['1'].boxShadow,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: data.isClosed ? `flex-start` : `center`,
  padding: data.isClosed ? `0px` : `0px 8px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  flex: `1`,
  margin: `0px`,
  overflow: `hidden`,
}));

const Stack: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const LogoPlaceholder: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `28px 40px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const MinDims: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const MinHeight: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  width: `1px`,
  height: `36px`,
  margin: `0px`,
  overflow: `hidden`,
});

const MinWidth: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  width: `139.08px`,
  height: `1px`,
  margin: `0px`,
  overflow: `hidden`,
});

const Typography: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['text']['primary'],
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `800`,
  fontSize: `51px`,
  letterSpacing: `2.5px`,
  textDecoration: `none`,
  lineHeight: `73.00000190734863%`,
  textTransform: `none`,
  height: `36px`,
  width: `140px`,
  position: `absolute`,
  left: `40px`,
  top: `28px`,
}));

const MenuItem1: any = styled(MenuItem, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  alignSelf: data.isClosed ? 'unset' : `stretch`,
  height: `48px`,
  margin: `8px 0px 0px 0px`,
  width: data.isClosed ? `48px` : 'unset',
}));

const MenuItem2: any = styled(MenuItem, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  alignSelf: data.isClosed ? 'unset' : `stretch`,
  height: `48px`,
  margin: `8px 0px 0px 0px`,
  width: data.isClosed ? `48px` : 'unset',
}));

const MenuItem3: any = styled(MenuItem, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  alignSelf: data.isClosed ? 'unset' : `stretch`,
  height: `48px`,
  margin: `8px 0px 0px 0px`,
  width: data.isClosed ? `48px` : 'unset',
}));

function MainNav(props: MainNavProps): JSX.Element {
  const { data, fns } = useMainNav();

  return (
    <StateOpened
      className={props.className}
      mainNavState={fns.handleMainNavChange}
    >
      <Drawer data={data} onClick={fns.handleMainNavChange}>
        <Paper data={data}>
          <Stack>
            <LogoPlaceholder>
              <MinDims>
                <MinHeight></MinHeight>
                <MinWidth></MinWidth>
              </MinDims>
              {!data.isClosed && <Typography>{`LOGO`}</Typography>}
            </LogoPlaceholder>
            <MenuItem1 data={data} />
            <MenuItem2 data={data} />
            <MenuItem3 data={data} />
          </Stack>
        </Paper>
      </Drawer>
    </StateOpened>
  );
}

export default MainNav;
